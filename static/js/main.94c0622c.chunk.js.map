{"version":3,"sources":["components/TodoItem.js","components/InputForm.js","components/Header.js","components/TodoList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","onClick","markDone","children","complete","onDoubleClick","update","desc","delete","index_es","icon","faTrash","InputForm","id","onSubmit","handleSubmit","type","placeholder","onChange","handleChange","Header","Component","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","clearInputField","state","idIncrementer","todos","document","getElementById","reset","setState","newTodo","toConsumableArray","filter","todo","console","log","_this2","alert","edit","src_components_InputForm","concat","e","target","value","preventDefault","_this3","map","src_components_TodoItem","key","toString","Header_Header","Footer","href","App","TodoList_TodoList","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94c0622c.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoItem.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst TodoItem = (props) => {\n\treturn <li \n\t\tclassName='TodoItem'>\n\t\t<span className=\"circle-loader\" onClick={props.markDone}>\n\t\t\t<div \n\t\t\t\tclassName={props.children.complete ? 'checkmark draw' : ''}>\n\t\t\t</div>\n\t\t</span>\n\t\t\t\n\t\t<span \n\t\t\tclassName={props.children.complete ? 'content complete' : 'content'} \n\t\t\tonDoubleClick={props.update}>\n\t\t\t{props.children.desc}\n\t\t</span>\n\n\t\t<span className=\"delete-circle\" \n\t\t\tonClick={props.delete}>\n\t\t\t<FontAwesomeIcon icon={faTrash} className=\"red\" />\n\t\t</span>\n\t</li>;\n};\n\nexport default TodoItem;","import React from 'react';\nimport './InputForm.css';\n\nconst InputForm = props => {\n\treturn <li>\n\t\t<form id=\"input\" className='form' onSubmit={props.handleSubmit}>\n\t\t\t<input \n\t\t\t\ttype='text' \n\t\t\t\tplaceholder='What needs to be done?'\n\t\t\t\tclassName='InputField' \n\t\t\t\tonChange={props.handleChange}/>\n\t\t</form>\n\t</li>;\n};\n\nexport default InputForm;","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n\trender() {\n\t\treturn <h1 \t\t\n\t\t\tclassName=\"Header\">\n\t\t\t<em>Todos</em>\n\t\t</h1>;\n\t}\n}\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport InputForm from './InputForm';\nimport Header from './Header';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.clearInputField = this.clearInputField.bind(this);\n\n\t\tthis.state = {\n\t\t\tidIncrementer: 0,\n\t\t\ttodos: [\n\t\t\t\t// { desc: 'do laundry', complete: false, id: 1, classList: '', edit: true },\n\t\t\t\t// { desc: 'budget', complete: true, id: 2, classList: '', edit: false },\n\t\t\t\t// {desc: 'water the plants', complete: true, id: 3, classList: '', edit: false },\n\t\t\t\t// {desc: 'code', complete: false, id: 4, classList: '', edit: false },\n\t\t\t\t// {desc: 'call Mom', complete: false, id: 5, classList: '', edit: false }\n\t\t\t]\n\t\t};\n\t}\n\n\tclearInputField() {\n\t\tdocument.getElementById('input').reset();\n\t\tthis.setState({newTodo: ''});\n\t}\n\t\n\tdelete(id) {\n\t\tlet todos = [...this.state.todos];\n\t\ttodos = todos.filter((todo) => {\n\t\t\tconsole.log(id);\n\t\t\treturn todo.id !== id;\n\t\t});\n\t\tthis.setState({\n\t\t\ttodos: [...todos]\n\t\t});\n\t}\n    \n\tupdate(id) {\n\t\talert('update', id);\n\t\t\n\t\tlet todos = [...this.state.todos];\n\t\ttodos = todos.filter((todo) => {\n\t\t\tif (todo.edit === false) {\n\t\t\t\treturn [\n\t\t\t\t\t<InputForm  \n\t\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t\t\thandleChange={this.handleChange} />,\n\t\t\t\t\t...todos];\n\t\t\t}\n\t\t});\n\t\t// this.setState({\n\t\t// \ttodos: [...todos]\n\t\t// });\n\t}\n    \n\tmarkDone(id) {\n\t\tlet todos = [...this.state.todos];\n\t\ttodos = todos.filter((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.complete = !todo.complete;\n\t\t\t}\n\t\t\treturn todos;\n\t\t});\n        \n\t\tthis.setState({\n\t\t\ttodos: [...todos]\n\t\t});\n\t}\n\n\thandleChange(e) {\n\t\tthis.setState({newTodo: e.target.value});\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.setState({\n\t\t\ttodos: [\n\t\t\t\t...this.state.todos,\n\t\t\t\t{desc: this.state.newTodo, complete: false, id: this.state.idIncrementer++ }\n\t\t\t]\n\t\t});\n\t\tthis.clearInputField();\n\t}\n\n\trender() {\n\t\tlet todos;\n\t\ttodos = this.state.todos.map(todo => {\n\t\t\treturn <TodoItem \n\t\t\t\tmarkDone={this.markDone.bind(this, todo.id)}\n\t\t\t\tupdate={this.update.bind(this, todo.id)}\n\t\t\t\tdelete={this.delete.bind(this, todo.id)}\n\t\t\t\tkey={todo.id.toString()}\n\t\t\t\tid={todo.id}>\n\t\t\t\t{todo}\n\t\t\t</TodoItem>;\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"TodoListContainer\">\n\t\t\t\t<Header />\n\t\t\t\t<ul className='TodoList'>\n\t\t\t\t\t<InputForm  \n\t\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t\t\thandleChange={this.handleChange} />\n\n\t\t\t\t\t{todos}\n\t\t\t\t</ul>\n\n\t\t\t</div>\n\t\t);\n\n\t}\n}","import React, { Component } from 'react';\nimport './Footer.css';\n\nexport default class Footer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Footer\">\n\t\t\t\t<a href=\"https://jamesroyston.dev\">portfolio</a> | <a href=\"https://github.com/jamesroyston\">github\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\trender() {\n\t\treturn <div className=\"App\">\n\t\t\t<TodoList />\n\t\t\t<Footer />\n\t\t</div>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}