{"version":3,"sources":["logo.svg","components/TodoItem.js","components/InputField.js","components/TodoList.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","props","react_default","a","createElement","className","children","desc","InputField","Fragment","type","placeholder","onChange","handleChange","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","handleSubmit","state","todos","e","setState","newTodo","target","value","preventDefault","concat","toConsumableArray","alert","map","todo","src_components_TodoItem","onSubmit","src_components_InputField","Component","Header","Footer","href","App","Header_Header","TodoList_TodoList","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2QCWzBC,SARE,SAACC,GACd,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACTJ,EAAMK,SAASC,QCKbC,SARI,SAAAP,GACf,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAMM,SAAP,KACIP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,YAAY,oBAAmBN,UAAU,aAAaO,SAAUX,EAAMY,kBCDhFC,qBACjB,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDY,aAAeE,EAAKF,aAAaS,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IACpBA,EAAKS,aAAeT,EAAKS,aAAaF,KAAlBN,OAAAO,EAAA,EAAAP,CAAAD,IAEpBA,EAAKU,MAAQ,CACTC,MAAO,CACH,CAAEnB,KAAM,oBACR,CAAEA,KAAM,UACR,CAAEA,KAAM,gBATDQ,4EAcNY,GACTT,KAAKU,SAAS,CAACC,QAASF,EAAEG,OAAOC,6CAGxBJ,GACTA,EAAEK,iBACFd,KAAKU,SACD,CAACF,MAAK,GAAAO,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAME,KAAKO,MAAMC,OAAjB,CAAwB,CAACnB,KAAMW,KAAKO,MAAMI,aAEpDM,MAAM,0DAIN,IAAIT,EAKJ,OAJAA,EAAQR,KAAKO,MAAMC,MAAMU,IAAI,SAAAC,GACzB,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,KAAWD,KAIlBnC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOkC,SAAUrB,KAAKM,cAClCtB,EAAAC,EAAAC,cAACoC,EAAD,CAAY3B,aAAcK,KAAKL,gBAEnCX,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACbH,EAAAC,EAAAC,cAAA,aACKsB,YAxCae,cCHjBC,mLAEb,OACIxC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,0BAJoBoC,aCCfE,0LAEb,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,4BAAR,oBADJ,MAC8D1C,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,mCAAR,4BAJtCH,cCkBrBI,cAbd,SAAAA,EAAY5C,GAAQ,OAAAe,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KACbjB,0EAIN,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAClBH,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,cATYP,aCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.34445751.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './TodoItem.css';\n\nconst TodoItem = (props) => {\n    return (\n        <td className='TodoItem'>\n            {props.children.desc}\n        </td>\n    );\n}\n\nexport default TodoItem;","import React from 'react';\nimport './InputField.css';\n\nconst InputField = props => {\n    return (\n        <React.Fragment>\n            <input type='text' placeholder='what needs doing?'className='InputField' onChange={props.handleChange}/>\n        </React.Fragment>\n    );\n}\n\nexport default InputField;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport InputField from './InputField';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            todos: [\n                { desc: 'water the plants' },\n                { desc: 'budget' },\n                { desc: 'do laundry' }\n            ]\n        }\n    }\n\n    handleChange(e) {\n        this.setState({newTodo: e.target.value})\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.setState(\n            {todos: [...this.state.todos, {desc: this.state.newTodo}]}\n        )\n        alert('hey, a todo was added');\n    }\n\n    render() {\n        let todos;\n        todos = this.state.todos.map(todo => {\n            return <TodoItem>{todo}</TodoItem>\n        });\n\n        return (\n            <div>\n                <form className='form' onSubmit={this.handleSubmit}> \n                    <InputField handleChange={this.handleChange} />\n                </form>\n                <table className='TodoList'>\n                    <tbody>\n                        {todos}\n                    </tbody>\n                </table>\n            </div>\n        );\n\n    }\n};","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className='Header'>Todo MVC Clone</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer\">\n                <a href=\"https://jamesroyston.dev\">see my portfolio</a> | <a href=\"https://github.com/jamesroyston\">peep that github</a>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\treturn <div className=\"App\">\n      <Header />\n      <TodoList />\n      <Footer />\n    </div>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}