{"version":3,"sources":["components/TodoItem.js","components/InputField.js","components/TodoList.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","onClick","handleDelete","children","desc","InputField","Fragment","type","placeholder","onChange","handleChange","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","handleSubmit","clearInputField","state","todos","complete","id","document","getElementById","reset","setState","newTodo","toConsumableArray","indexOf","splice","e","target","value","preventDefault","idIncrementer","length","concat","_this2","map","todo","src_components_TodoItem","key","toString","onSubmit","src_components_InputField","Component","Header","Footer","href","App","Header_Header","TodoList_TodoList","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.098e52e3.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoItem.css';\n\nconst TodoItem = (props) => {\n    return (\n        <td className='TodoItem'>\n            <span onClick={props.handleDelete} className=\"deleteButton\"></span>\n            <span className=\"content\">\n                {props.children.desc}\n            </span>\n        </td>\n    );\n}\n\nexport default TodoItem;","import React from 'react';\nimport './InputField.css';\n\nconst InputField = props => {\n    return (\n        <React.Fragment>\n            <input type='text' placeholder='what needs doing?'className='InputField' onChange={props.handleChange}/>\n        </React.Fragment>\n    );\n}\n\nexport default InputField;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport InputField from './InputField';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearInputField = this.clearInputField.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n\n        this.state = {\n            todos: [\n                { desc: 'do laundry', complete: false, id: 3 },\n                { desc: 'budget', complete: false, id: 2 },\n                { desc: 'water the plants', complete: false, id: 1 }\n            ]\n        }\n    }\n\n    clearInputField() {\n        document.getElementById('input').reset();\n        this.setState({newTodo: ''})\n    }\n\n    handleDelete() {\n        let todos = [...this.state.todos];\n        todos = todos.id.indexOf(this.id).splice();\n        this.setState({todos: [...todos]})\n    }\n\n    handleChange(e) {\n        this.setState({newTodo: e.target.value})\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let idIncrementer = this.state.todos.length;\n        this.setState(\n            {todos: [{desc: this.state.newTodo, complete: false, id: idIncrementer+1 }, ...this.state.todos]}\n        )\n        this.clearInputField();\n    }\n\n    render() {\n        let todos;\n        todos = this.state.todos.map(todo => {\n            return <TodoItem onClick={this.handleDelete} key={todo.id.toString()}>{todo}</TodoItem>\n        });\n\n        return (\n            <div>\n                <form id=\"input\" className='form' onSubmit={this.handleSubmit}> \n                    <InputField handleChange={this.handleChange} />\n                </form>\n                <table className='TodoList'>\n                    <tbody>\n                        <tr>\n                            {todos}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n\n    }\n};","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className='Header'>Todo MVC Clone</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer\">\n                <a href=\"https://jamesroyston.dev\">see my portfolio</a> | <a href=\"https://github.com/jamesroyston\">peep that github</a>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\trender() {\n\t\treturn <div className=\"App\">\n      <Header />\n      <TodoList />\n      <Footer />\n    </div>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}