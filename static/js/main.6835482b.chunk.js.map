{"version":3,"sources":["components/TodoItem.js","components/InputField.js","components/TodoList.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","onClick","markDone","children","complete","update","desc","InputField","Fragment","type","placeholder","onChange","handleChange","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","handleSubmit","clearInputField","state","todos","id","classList","document","getElementById","reset","setState","newTodo","console","log","toConsumableArray","filter","todo","e","target","value","preventDefault","idIncrementer","length","concat","_this2","map","src_components_TodoItem","key","toString","onSubmit","src_components_InputField","Component","Header","Footer","href","App","Header_Header","TodoList_TodoList","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6835482b.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoItem.css';\n\nconst TodoItem = (props) => {\n\treturn (\n\t\t<td className='TodoItem'>\n\t\t\t<span className=\"circle-loader\" onClick={props.markDone}>\n\t\t\t\t<div \n\t\t\t\t\tclassName={props.children.complete ? 'checkmark draw' : ''}></div>\n\t\t\t</span>\n\t\t\t<span className={props.children.complete ? 'content complete' : 'content'} onClick={props.update}>\n\t\t\t\t{props.children.desc}\n\t\t\t</span>\n\t\t</td>\n\t);\n};\n\nexport default TodoItem;","import React from 'react';\nimport './InputField.css';\n\nconst InputField = props => {\n    return (\n        <React.Fragment>\n            <input type='text' placeholder='what needs doing?'className='InputField' onChange={props.handleChange}/>\n        </React.Fragment>\n    );\n}\n\nexport default InputField;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport InputField from './InputField';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.clearInputField = this.clearInputField.bind(this);\n\t\tthis.markDone = this.markDone.bind(this);\n\n\t\tthis.state = {\n\t\t\ttodos: [\n\t\t\t\t{ desc: 'do laundry', complete: false, id: 1, classList: '' },\n\t\t\t\t{ desc: 'budget', complete: true, id: 2, classList: '' },\n\t\t\t\t{desc: 'water the plants', complete: true, id: 3, classList: '' }\n\t\t\t]\n\t\t};\n\t}\n\n\tclearInputField() {\n\t\tdocument.getElementById('input').reset();\n\t\tthis.setState({newTodo: ''});\n\t}\n\n\t// handleDelete() {\n\t// \tlet todos = [...this.state.todos];\n\t// \ttodos = todos.id.indexOf(this.id).splice();\n\t// \tthis.setState({todos: [...todos]});\n\t// }\n    \n\tupdate(id) {\n\t\tconsole.log('update', id);\n\t}\n    \n\tmarkDone(id) {\n\t\tlet todos = [...this.state.todos];\n\t\ttodos = todos.filter((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.complete = !todo.complete;\n\t\t\t}\n\t\t\treturn todos;\n\t\t});\n        \n\t\tthis.setState({\n\t\t\ttodos: [...todos]\n\t\t});\n\t}\n\n\thandleChange(e) {\n\t\tthis.setState({newTodo: e.target.value});\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tlet idIncrementer = this.state.todos.length;\n\t\tthis.setState({\n\t\t\ttodos: [\n\t\t\t\t...this.state.todos,\n\t\t\t\t{desc: this.state.newTodo, complete: false, id: idIncrementer+1 }\n\t\t\t]\n\t\t});\n\t\tthis.clearInputField();\n\t}\n\n\trender() {\n\t\tlet todos;\n\t\ttodos = this.state.todos.map(todo => {\n\t\t\treturn <TodoItem \n\t\t\t\tmarkDone={this.markDone.bind(this, todo.id)}\n\t\t\t\tupdate={this.update.bind(this, todo.id)} \n\t\t\t\tkey={todo.id.toString()}\n\t\t\t\tid={todo.id}\n\t\t\t\tclassList={todo.classList}>\n\t\t\t\t{todo}\n\t\t\t</TodoItem>;\n\t\t});\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form id=\"input\" className='form' onSubmit={this.handleSubmit}> \n\t\t\t\t\t<InputField handleChange={this.handleChange} />\n\t\t\t\t</form>\n\t\t\t\t<table className='TodoList'>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{todos}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\n\t}\n}","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className='Header'>Todo MVC Clone</h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer\">\n                <a href=\"https://jamesroyston.dev\">see my portfolio</a> | <a href=\"https://github.com/jamesroyston\">peep that github</a>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return <div className=\"App\">\n      <Header />\n               <TodoList />\n      <Footer />\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}